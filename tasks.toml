[config]
on_error_task = "test_teardown"

[tasks.format]
install_crate = "rustfmt"
command = "cargo"
args = ["fmt", "--", "--emit=files"]

[tasks.clean]
command = "cargo"
args = ["clean"]

[tasks.build]
command = "cargo"
args = ["build"]
dependencies = ["clean"]

[tasks.test]
command = "cargo"
args = ["test"]
dependencies = ["clean"]

[tasks.test-flow]
dependencies = [
    "docker_setup",
    "test_setup",
    "test",
    "test_teardown",
    "docker_teardown"
]

[tasks.food-flow]
dependencies = [
    "format",
    "build",
    "test-flow"
]


[tasks.docker_setup]
script_runner = "@rust"
script = [
'''
use std::process::Command;

fn main() {
    let mut child = Command::new("docker-compose")
        .arg("up")
        .arg("-d")
        .arg("--build")
        .spawn()
        .expect("Unable to start testing docker containers");

    let _result = child.wait().expect("Failed to wait for command to finish");
}

'''
]

[tasks.test_setup]
script_runner = "@rust"
script = [
'''
//! ```cargo
//! [dependencies]
//! diesel = { version = "1.4.5", features = ["postgres"] }
//! diesel_migrations = "1.4.0"

extern crate diesel;
extern crate diesel_migrations;

use diesel::prelude::*;
use diesel::pg::PgConnection;
use diesel_migrations::run_pending_migrations;

fn main() {
    let postgres_url = "postgres://root:password@localhost:5432/postgres";
    let db_url = "postgres://root:password@localhost:5432/testdb";
    let conn =
        PgConnection::establish(&postgres_url).expect("Could not connect to database on test run, exiting");
    let query = diesel::sql_query("CREATE DATABASE testdb");

    query
        .execute(&conn)
        .expect("Could not create database testdb, exiting");

    let conn2 =
        PgConnection::establish(&db_url).expect("Could not connect to database on test run, exiting");

    run_pending_migrations(&conn2).expect("Could not run migrations, exiting");
}
'''
]

[tasks.test_teardown]
script_runner = "@rust"
script = [
'''
//! ```cargo
//! [dependencies]
//! diesel = { version = "1.4.5", features = ["postgres"] }
extern crate diesel;

use diesel::prelude::*;
use diesel::pg::PgConnection;

fn main() {
    let postgres_url = "postgres://root:password@localhost:5432/postgres";
    let conn =
        PgConnection::establish(&postgres_url).expect("Could not connect to database, exiting");


    let query = diesel::sql_query("DROP DATABASE IF EXISTS testdb WITH (FORCE)");

    query
        .execute(&conn)
        .expect("Failure dropping database testdb, exiting");
}
'''
]

[tasks.docker_teardown]
script_runner = "@rust"
script = [
'''
use std::process::Command;

fn main() {
    let mut child = Command::new("docker-compose")
        .arg("rm")
        .arg("-f")
        .arg("-s")
        .spawn()
        .expect("Unable to execute docker teardown");


    let _result = child.wait().expect("Failed to wait for command to finish");
}

'''
]